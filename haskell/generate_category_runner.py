import os
import sys

def generate_category_module(category_dir):
    category = os.path.basename(category_dir)
    if not category:
        msg = f"Category: '{category}' must be a valid Category string"
        raise ValueError(msg)

    category_lower = category.lower()
    hs_filename = os.path.join(category_dir, f"{category}.hs")
    files = [
        f for f in os.listdir(category_dir)
        if f.endswith(".hs") and f != f"{category}.hs"
    ]

    module_imports = []
    runner_calls = []

    for file in sorted(files):
        mod_name = file[:-3]  # Strip ".hs"
        func_name = "do" + mod_name  # Assumes each module has a `do<ModuleName>` runner
        module_imports.append(
            f"import Problems.{category}.{mod_name} ({func_name})"
        )
        runner_calls.append(f"    {func_name}")

    # Compose final content
    content = f"""-- Auto-generated by generate_category_runner.py
module Problems.{category}.{category} ({category_lower}) where

{chr(10).join(module_imports)}

{category_lower} :: IO ()
{category_lower} = do
    putStrLn "\\n--- {category} Problems ---"
{chr(10).join(runner_calls)}
"""

    with open(hs_filename, "w") as f:
        f.write(content)
    print(f"Generated {hs_filename} with {len(files)} problem(s).")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python generate_category_runner.py src/Problems/Arrays")
    else:
        generate_category_module(sys.argv[1])
